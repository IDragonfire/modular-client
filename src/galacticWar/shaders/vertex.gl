
const float Eta = 1.1;         // Ratio of indices of refraction
const float FresnelPower = 2.5;

const float F  = ((1.0-Eta) * (1.0-Eta)) / ((1.0+Eta) * (1.0+Eta));

varying vec3 normal, halfVector;
varying float Ratio;


uniform vec3 pos;         // Position de la sphere dans le repere Objet
uniform vec3 scaling;
attribute highp vec3 camPos;         // Position de la sphere dans le repere Objet
attribute lowp float rotation;


void main(void)
{

  	vec4 a = gl_Vertex; 
	a.x = a.x * scaling.x;
	a.y = a.y * scaling.y;
	a.z = a.z * scaling.z;

	gl_TexCoord[0] = gl_MultiTexCoord0;
	


	vec3 look = normalize(camPos - pos);
	vec3 upVector = vec3(1.0, 0.0, 0.0);

	
	
	vec3 r = cross ( upVector, look );
	vec3 up = cross ( look, r );

	mat4 RotationMatrixDir = mat4( vec4(cos(-1.53), 	0.0, sin(-1.53), 	0.0),
                              vec4(0.0, 		1.0, 0.0, 			0.0),
                              vec4(-sin(-1.53), 0.0, cos(-1.53), 	0.0),
                              vec4(0.0, 		0.0, 0.0, 			1.0)); 

	mat4 RotationMatrixDir2 = mat4(1.0, 0.0, 0.0, 0.0,
                                     0.0, cos(rotation), -sin(rotation), 0.0,
                                     0.0, sin(rotation), cos(rotation), 0.0,
                                     0.0, 0.0, 0.0, 1.0); 

    mat4 billboard = mat4(
     				vec4(r.x, up.x, look.x, pos.x),
                   	vec4(r.y, up.y, look.y, pos.y),
                   	vec4(r.z, up.z, look.z, pos.z),
                   	vec4(0, 0, 0, 1.0)                             
                    );


    mat4 finalPosMtx = RotationMatrixDir *RotationMatrixDir2 * billboard;
    
    normal = normalize(vec4(gl_Normal ,1)* RotationMatrixDir *RotationMatrixDir2);
    
    vec4 ecPosition  = gl_ModelViewMatrix * a *finalPosMtx;

	vec3 i = normalize(ecPosition - gl_ModelViewMatrix*vec4(camPos,1));
    
	Ratio   = F + (1.0 - F) * pow(1.0 - normal.z, FresnelPower);

	halfVector =  normalize(vec3(gl_LightSource[0].halfVector.xyz));



   	gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * (a * finalPosMtx);


}